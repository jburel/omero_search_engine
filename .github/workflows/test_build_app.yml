name: Search engine
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches: [ main ]
  #pull_request:
   # branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgress
          POSTGRES_PASSWORD: passwprd
          POSTGRES_DB: omero
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      elasticsearch:
        image: elasticsearch:7.16.2
        ports:
          - 9200/tcp
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    #test the app before bulding the image
    - name: Install dependencies and test
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt;
        #Configure database url
        python manage.py set_database_configuration -u localhost -s  ${{ job.services.postgres.ports[5432] }} -n postgress -p passwprd
        #configure elasticsearch
        python manage.py set_elasticsearch_configuration -e localhost:${{ job.services.elasticsearch.ports[9200] }}
        #run tests
        python -m unittest discover -s unit_tests
    #Build the image first
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: display docker account
      run: echo ${{ secrets.DOCKER_LOGIN }}
    - name: Login to Github Packages
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: get image tag
      #will be the tag name in case of pushing tag otherwise it will latest
      id: gettags
      run: |
        if [[ $GITHUB_REF == 'refs/tags/'* ]]; then
          TAGS='["openmicroscopy/omero-searchengine:latest","openmicroscopy/omero-searchengine:'${GITHUB_REF/refs\/tags\//}'"]'
        else
          TAGS='["openmicroscopy/omero-searchengine:latest"]'
        fi
        echo '::set-output name=tags::'$TAGS
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./deployment/docker/centos/Dockerfile
        push: true
        tags: ${{ join(fromJson(steps.gettags.outputs.tags)) }}


